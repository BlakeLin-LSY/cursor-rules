---
description:
globs:
alwaysApply: false
---
---
description: CSS 和樣式規範
globs: *.css, *.scss, *.less, *.styled.ts
alwaysApply: false
---

# CSS 和樣式規範

## 樣式架構原則
- **元件化樣式**：每個元件的樣式應該封裝在元件內部
- **樣式隔離**：避免全域樣式污染，使用CSS-in-JS或CSS Modules
- **主題一致性**：使用設計系統和主題變數保持視覺一致性
- **響應式設計**：優先考慮行動端，採用行動優先的響應式設計
- **效能優化**：避免不必要的樣式重繪和重排

## Styled Components 規範
- **元件命名**：使用描述性的元件名，以 `Styled` 開頭
  ```typescript
  const StyledCard = styled.div`
    padding: 16px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  `;
  ```

- **主題使用**：透過 `theme` 屬性存取主題變數
  ```typescript
  const StyledButton = styled.button`
    background-color: ${({ theme }) => theme.colors.primary};
    color: ${({ theme }) => theme.colors.white};
  `;
  ```

- **條件樣式**：使用 props 進行條件樣式設定
  ```typescript
  const StyledButton = styled.button<{ variant: 'primary' | 'secondary' }>`
    background-color: ${({ variant, theme }) =>
      variant === 'primary' ? theme.colors.primary : theme.colors.secondary
    };
  `;
  ```

- **樣式繼承**：合理使用樣式繼承減少重複程式碼
  ```typescript
  const BaseButton = styled.button`
    padding: 8px 16px;
    border-radius: 4px;
    border: none;
  `;

  const PrimaryButton = styled(BaseButton)`
    background-color: ${({ theme }) => theme.colors.primary};
  `;
  ```

## Ant Design 客製化規範
- **主題客製化**：使用 ConfigProvider 進行全域主題客製化
  ```typescript
  const theme = {
    token: {
      colorPrimary: '#1890ff',
      borderRadius: 6,
      fontSize: 14,
    },
  };
  ```

- **元件樣式覆蓋**：使用 CSS-in-JS 覆蓋 Ant Design 元件樣式
  ```typescript
  const StyledTable = styled(Table)`
    .ant-table-thead > tr > th {
      background-color: #fafafa;
      font-weight: 600;
    }
  `;
  ```

- **自訂元件**：基於 Ant Design 元件建立自訂元件
  ```typescript
  const CustomCard = styled(Card)`
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  `;
  ```

## 響應式設計規範
- **斷點定義**：使用標準斷點進行響應式設計
  ```typescript
  const breakpoints = {
    xs: '480px',
    sm: '576px',
    md: '768px',
    lg: '992px',
    xl: '1200px',
    xxl: '1600px',
  };
  ```

- **媒體查詢**：使用 CSS-in-JS 編寫媒體查詢
  ```typescript
  const ResponsiveContainer = styled.div`
    padding: 16px;

    @media (min-width: ${({ theme }) => theme.breakpoints.md}) {
      padding: 24px;
    }
  `;
  ```

- **Flex佈局**：優先使用 Flexbox 進行佈局
  ```typescript
  const FlexContainer = styled.div`
    display: flex;
    flex-direction: column;
    gap: 16px;

    @media (min-width: ${({ theme }) => theme.breakpoints.md}) {
      flex-direction: row;
    }
  `;
  ```

## 顏色和主題規範
- **顏色系統**：定義完整的顏色系統
  ```typescript
  const colors = {
    primary: '#1890ff',
    success: '#52c41a',
    warning: '#faad14',
    error: '#ff4d4f',
    text: {
      primary: '#262626',
      secondary: '#595959',
      disabled: '#bfbfbf',
    },
    background: {
      primary: '#ffffff',
      secondary: '#fafafa',
      disabled: '#f5f5f5',
    },
  };
  ```

- **暗色主題**：支援暗色主題切換
  ```typescript
  const darkTheme = {
    colors: {
      primary: '#1890ff',
      background: {
        primary: '#141414',
        secondary: '#1f1f1f',
      },
      text: {
        primary: '#ffffff',
        secondary: '#a6a6a6',
      },
    },
  };
  ```

## 動畫和過渡規範
- **過渡效果**：為互動元素新增適當的過渡效果
  ```typescript
  const AnimatedButton = styled.button`
    transition: all 0.3s ease;

    &:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
  `;
  ```

- **載入動畫**：使用 CSS 動畫建立載入效果
  ```typescript
  const LoadingSpinner = styled.div`
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    animation: spin 1s linear infinite;
  `;
  ```

## 佈局規範
- **網格系統**：使用 CSS Grid 或 Flexbox 建立網格佈局
  ```typescript
  const GridContainer = styled.div`
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 24px;
  `;
  ```

- **間距系統**：使用統一的間距系統
  ```typescript
  const spacing = {
    xs: '4px',
    sm: '8px',
    md: '16px',
    lg: '24px',
    xl: '32px',
    xxl: '48px',
  };
  ```

## 字型和排版規範
- **字型系統**：定義完整的字型系統
  ```typescript
  const typography = {
    fontFamily: {
      primary: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto',
      mono: '"SFMono-Regular", Consolas, "Liberation Mono", Menlo',
    },
    fontSize: {
      xs: '12px',
      sm: '14px',
      md: '16px',
      lg: '18px',
      xl: '20px',
      xxl: '24px',
    },
    fontWeight: {
      normal: 400,
      medium: 500,
      semibold: 600,
      bold: 700,
    },
  };
  ```

- **行高和字間距**：設定合適的行高和字間距
  ```typescript
  const TextComponent = styled.p`
    line-height: 1.6;
    letter-spacing: 0.02em;
  `;
  ```

## 效能優化規範
- **CSS優化**：避免深層嵌套和複雜選擇器
- **重繪重排**：避免頻繁的樣式變更導致的重繪重排
- **CSS-in-JS優化**：使用 `shouldForwardProp` 避免不必要的 DOM 屬性
  ```typescript
  const StyledDiv = styled.div.withConfig({
    shouldForwardProp: (prop) => !['customProp'].includes(prop),
  })<{ customProp: boolean }>`
    color: ${({ customProp }) => customProp ? 'red' : 'blue'};
  `;
  ```

## 可存取性規範
- **對比度**：確保文字和背景有足夠的對比度
- **焦點狀態**：為可互動元素提供清晰的焦點狀態
  ```typescript
  const AccessibleButton = styled.button`
    &:focus {
      outline: 2px solid ${({ theme }) => theme.colors.primary};
      outline-offset: 2px;
    }
  `;
  ```

- **語意化**：使用語意化的 HTML 元素和 ARIA 屬性

## 程式碼組織規範
- **檔案結構**：樣式檔案與元件檔案放在同一目錄
- **樣式分離**：將複雜的樣式邏輯提取到單獨的樣式檔案
- **主題檔案**：將主題相關的設定集中管理
- **工具函式**：建立樣式工具函式提高複用性
  ```typescript
  const getSpacing = (size: keyof typeof spacing) => spacing[size];
  const getColor = (color: string) => ({ theme }: { theme: any }) => theme.colors[color];
  ```

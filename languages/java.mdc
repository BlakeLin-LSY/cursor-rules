---
description:
globs:
alwaysApply: false
---
---
description: 此規則解釋了 Java 的約定和最佳實踐。
globs: **/*.java
alwaysApply: false
---

# Java 語言規範

## Java 21 特性使用
- **Record類別**：用於不可變資料傳輸物件
  ```java
  public record UserInfo(String name, String email, LocalDateTime createdAt) {}
  ```

- **Pattern Matching**：在switch表示式中使用模式匹配
  ```java
  public String formatValue(Object value) {
      return switch (value) {
          case String s -> "String: " + s;
          case Integer i -> "Number: " + i;
          case null -> "null value";
          default -> "Unknown: " + value.toString();
      };
  }
  ```

- **Text Blocks**：用於多行字串，特別是SQL和JSON
  ```java
  String sql = """
      SELECT u.name, u.email
      FROM users u
      WHERE u.status = 'ACTIVE'
      ORDER BY u.created_at DESC
      """;
  ```

- **Sealed Classes**：用於受限的類別階層結構
  ```java
  public sealed class Result<T> permits Success, Error {
      // 基底類別定義
  }

  public final class Success<T> extends Result<T> {
      private final T data;
      // 實作
  }
  ```

- **Virtual Threads**：用於高並行場景
  ```java
  try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
      executor.submit(() -> {
          // 高並行任務
      });
  }
  ```

## 命名約定
- **類別名稱**：使用帕斯卡命名法（如 `UserController`、`OrderService`）
- **方法和變數名稱**：使用駝峰命名法（如 `findUserById`、`isOrderValid`）
- **常數**：使用全大寫底線分隔（如 `MAX_RETRY_ATTEMPTS`、`DEFAULT_PAGE_SIZE`）
- **套件名稱**：使用小寫，按功能模組劃分（如 `com.example.user.domain`）

## 程式碼風格
- **縮排**：使用4個空格，不使用Tab
- **行長度**：每行不超過120個字元
- **大括號**：使用Egyptian風格（開括號不換行）
- **空行**：方法間使用一個空行分隔，邏輯區塊间使用空行分隔

## 例外處理
- **檢查例外**：謹慎使用檢查例外，優先使用執行時例外
- **例外鏈**：保持例外鏈，不遺失原始例外資訊
  ```java
  try {
      // 可能拋出例外的程式碼
  } catch (SpecificException e) {
      throw new BusinessException("業務處理失敗", e);
  }
  ```

- **資源管理**：使用try-with-resources自動管理資源
  ```java
  try (var reader = Files.newBufferedReader(path)) {
      // 使用reader
  }
  ```

## 集合和流處理
- **集合選擇**：根據使用場景選擇合適的集合型別
  - `ArrayList`：隨機存取頻繁
  - `LinkedList`：插入刪除頻繁
  - `HashMap`：鍵值對儲存
  - `TreeMap`：需要排序的鍵值對

- **Stream API**：充分利用Stream API進行函數式程式設計
  ```java
  List<String> activeUserNames = users.stream()
      .filter(user -> user.isActive())
      .map(User::getName)
      .sorted()
      .toList();
  ```

## 並行程式設計
- **執行緒安全**：優先使用不可變物件和執行緒安全的集合
- **鎖機制**：合理使用synchronized、ReentrantLock等鎖機制
- **並行集合**：使用ConcurrentHashMap、CopyOnWriteArrayList等並行集合
- **CompletableFuture**：使用CompletableFuture處理非同步操作
  ```java
  CompletableFuture<String> future = CompletableFuture
      .supplyAsync(() -> fetchData())
      .thenApply(data -> processData(data))
      .exceptionally(throwable -> "預設值");
  ```

## 記憶體管理
- **物件建立**：避免在迴圈中建立不必要的物件
- **字串處理**：大量字串操作使用StringBuilder
- **集合大小**：預估集合大小，避免頻繁擴容
- **弱引用**：適當使用WeakReference避免記憶體洩漏

## 泛型使用
- **型別安全**：充分利用泛型提供型別安全
- **通配符**：正確使用上界通配符（? extends）和下界通配符（? super）
- **型別擦除**：理解泛型型別擦除的限制
  ```java
  public <T extends Comparable<T>> T findMax(List<T> list) {
      return list.stream().max(Comparable::compareTo).orElse(null);
  }
  ```

## 註解使用
- **標準註解**：正確使用@Override、@Deprecated、@SuppressWarnings等
- **自訂註解**：合理建立自訂註解簡化程式碼
- **註解處理**：了解編譯時期和執行時註解處理

## 測試規範
- **單元測試**：使用JUnit 5編寫單元測試
- **測試命名**：測試方法使用描述性命名（如 `shouldReturnUserWhenValidIdProvided`）
- **斷言**：使用AssertJ提供更好的斷言體驗
  ```java
  @Test
  void shouldCalculateCorrectTotal() {
      // Given
      List<Item> items = List.of(
          new Item("item1", 10.0),
          new Item("item2", 20.0)
      );

      // When
      double total = calculator.calculateTotal(items);

      // Then
      assertThat(total).isEqualTo(30.0);
  }
  ```

## 效能優化
- **演算法複雜度**：選擇合適的演算法和資料結構
- **快取策略**：合理使用快取減少重複計算
- **懶載入**：對於昂貴的操作使用懶載入
- **批次處理**：批次處理資料庫操作和網路請求

## 程式碼品質
- **單一職責**：每個類別和方法只負責一個功能
- **開閉原則**：對擴展開放，對修改關閉
- **依賴反轉**：依賴抽象而非具體實作
- **介面隔離**：使用小而專一的介面
- **程式碼複用**：提取公共邏輯，避免重複程式碼

## 文件和註釋
- **JavaDoc**：為公共API編寫完整的JavaDoc
- **程式碼註釋**：為複雜邏輯新增解釋性註釋
- **TODO標記**：使用TODO標記待完成的工作
  ```java
  /**
   * 計算使用者積分
   *
   * @param userId 使用者ID
   * @param actions 使用者行為列表
   * @return 計算得出的積分值
   * @throws UserNotFoundException 當使用者不存在時拋出
   */
  public int calculatePoints(Long userId, List<UserAction> actions) {
      // 範例：實現積分計算邏輯
      return 0;
  }
  ```

---
description: 
globs: 
alwaysApply: false
---
---
description: TypeScript 編碼規則和最佳實踐
globs: **/*.ts, **/*.tsx, **/*.d.ts
---

# TypeScript 規則

## 型別系統
- 對於物件定義，優先使用介面而非型別
- 對於聯合型別、交叉型別和對映型別，使用 type
- 避免使用 `any`，對於未知型別優先使用 `unknown`
- 使用嚴格的 TypeScript 設定
- 充分利用 TypeScript 的內建工具型別
- 使用泛型實現可複用的型別模式

## 命名約定
- 型別名稱和介面使用 PascalCase
- 變數和函式使用 camelCase
- 常數使用 UPPER_CASE
- 使用帶有輔助動詞的描述性名稱（例如，isLoading, hasError）
- React props 的介面首碼使用 'Props'（例如，ButtonProps）

## 程式碼組織
- 型別定義應靠近使用它們的地方
- 共用的型別和介面從專用型別檔案匯出
- 使用桶匯出（index.ts）組織匯出
- 將共用型別放在 `types` 目錄中
- 元件 props 與其元件共同放置

## 函式
- 為公共函式使用明確返回型別
- 回呼和方法使用箭頭函式
- 實作帶有自訂錯誤型別的適當錯誤處理
- 複雜型別場景使用函式多載
- 優先使用 async/await 而非 Promises

## 最佳實踐
- 在 tsconfig.json 中啟用嚴格模式
- 不可變屬性使用 readonly
- 利用可辨識聯合型別提高型別安全性
- 使用型別守衛進行執行時型別檢查
- 實作適當的空值檢查
- 避免不必要的型別斷言

## 錯誤處理
- 為領域特定錯誤建立自訂錯誤型別
- 對可能失敗的操作使用 Result 型別
- 實作適當的錯誤邊界
- 使用帶有型別化 catch 子句的 try-catch 區塊
- 正確處理 Promise 拒絕

## 模式
- 複雜物件建立使用構建者模式
- 資料存取實作倉儲模式
- 物件建立使用工廠模式
- 利用依賴注入
- 使用模組模式實作封裝

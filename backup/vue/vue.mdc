---
description: 
globs: *.vue
alwaysApply: false
---
# Vue 開發規範

## 元件命名
- 元件名應該始終使用多詞組合，避免與HTML元素衝突
- 使用PascalCase命名元件：`TodoItem.vue`、`UserProfile.vue`
- 基礎元件應使用特定前綴，如`Base`、`App`或`V`
- 元件名應該是描述性的，不要過於簡略

## 元件結構
- 使用`<script setup>`語法糖
- 使用組合式API (Composition API)
- 元件選項/屬性順序：
  1. name
  2. components
  3. props
  4. emits
  5. setup()
  6. data()
  7. computed
  8. methods
  9. 生命週期鉤子
- 使用單檔案元件(SFC)格式

## Props 規範
- Prop名使用camelCase
- Prop需要定義類型和預設值
- 避免使用陣列或物件的預設值，應該使用工廠函數返回預設值
- Prop應該盡可能詳細地定義，包括類型、是否必須和驗證函數

## 事件命名
- 事件名應使用kebab-case，如`item-click`、`menu-select`
- 自訂事件應該有明確的含義，表示發生了什麼
- 避免使用容易混淆的事件名稱

## 樣式指南
- 優先使用scoped CSS
- 避免使用!important
- 元件特定樣式應該有特定的前綴
- 考慮使用CSS變數實現主題

## 效能優化
- 使用`v-show`代替`v-if`進行頻繁切換
- 長列表使用虛擬滾動
- 避免在計算屬性中進行複雜操作
- 使用keep-alive快取元件
- 合理使用非同步元件和懶載入

## 狀態管理
- 使用Pinia進行狀態管理
- store應該按功能模組劃分
- 保持store簡單，避免過度設計

## 路由
- 路由名稱應當與元件名稱匹配
- 使用懶載入減少初始載入時間
- 路由守衛應當簡潔，避免複雜邏輯

## 通用建議
- 避免使用`this.$parent`或`this.$refs`直接操作DOM
- 優先使用計算屬性而不是複雜的範本表達式
- 使用v-for時必須提供key
- 不要在同一元素上同時使用v-if和v-for
- 複用元件時使用key確保完全重新渲染
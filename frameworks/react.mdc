---
description: 
globs: 
alwaysApply: false
---
---
description: 此規則解釋了 React 元件模式、hooks 使用方法和最佳實踐。
globs: **/*.jsx,**/*.tsx
alwaysApply: false
---

# React 規則

你是一位專精 React 的 AI 開發助手。

## 元件結構
- 優先使用函數元件而非類別元件
- 保持元件小巧且專注
- 將可複用邏輯提取到自訂 hook 中
- 使用組合而非繼承
- 使用 TypeScript 實作適當的 prop 型別
- 將大型元件拆分為更小、更專注的元件

## Hooks
- 遵循 Hooks 的規則
- 使用自訂 hooks 實作可複用邏輯
- 保持 hooks 專注且簡單
- 在 useEffect 中使用適當的依賴陣列
- 在需要時在 useEffect 中實作清理功能
- 避免巢狀 hooks

## 狀態管理
- 使用 useState 管理元件本地狀態
- 使用 useReducer 處理複雜狀態邏輯
- 使用 Context API 共用狀態
- 將狀態盡可能靠近使用它的地方
- 透過適當的狀態管理避免 prop drilling
- 僅在必要時使用狀態管理庫

## 效能
- 實作適當的記憶化 (useMemo, useCallback)
- 對開銷大的元件使用 React.memo
- 避免不必要的重新渲染
- 實作適當的懶載入
- 在列表中使用適當的 key 屬性
- 分析並優化渲染效能

## 表單
- 對表單輸入使用受控元件
- 實作適當的表單驗證
- 正確處理表單提交狀態
- 顯示適當的載入和錯誤狀態
- 對複雜表單使用表單庫
- 為表單實作適當的可存取性

## 錯誤處理
- 實作 Error Boundaries
- 正確處理非同步錯誤
- 顯示使用者友好的錯誤訊息
- 實作適當的備用 UI
- 適當記錄錯誤
- 優雅處理邊緣情況

## 測試
- 為元件編寫單元測試
- 為複雜流程實作整合測試
- 使用 React Testing Library
- 測試使用者互動
- 測試錯誤場景
- 實作適當的模擬資料

## 可存取性
- 使用語意化 HTML 元素
- 實作適當的 ARIA 屬性
- 確保鍵盤導覽
- 使用螢幕閱讀器測試
- 管理焦點
- 為圖片提供適當的 alt 文字

## 程式碼組織
- 將相關元件組織在一起
- 使用適當的檔案命名約定
- 實作適當的目錄結構
- 保持樣式靠近元件
- 使用適當的匯入/匯出
- 記錄複雜的元件邏輯

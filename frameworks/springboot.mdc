---
description:
globs:
alwaysApply: false
---
# Spring Boot 3 企業級最佳實踐規範

## 1. 設定管理模組

### 1.1 設定檔組織
- **主設定檔**：`application.yml` 包含通用設定
- **環境設定**：`application-{profile}.yml` 按環境分離
- **設定優先順序**：命令列參數 > 環境變數 > 設定檔
- **敏感資訊**：使用環境變數或設定中心，禁止硬式編碼

### 1.2 設定屬性綁定
- 使用 `@ConfigurationProperties` 進行型別安全的設定綁定
- 設定類別使用 `@Validated` 進行參數校驗
- 複雜設定使用巢狀類別結構
- 提供預設值和設定文件

### 1.3 多環境管理
- **開發環境**：本地資料庫，詳細日誌，熱重載
- **測試環境**：記憶體資料庫，模擬外部服務
- **生產環境**：外部設定，最小日誌級別，效能監控

### 1.4 設定最佳實踐
- 設定項命名使用 kebab-case
- 布林值設定明確語意（enabled/disabled）
- 數值設定包含單位說明
- 定期審查和清理無用設定

## 2. 依賴注入模組

### 2.1 Bean 定義策略
- **元件掃描**：使用 `@Component`、`@Service`、`@Repository`、`@Controller`
- **設定類別**：複雜 Bean 使用 `@Configuration` + `@Bean`
- **條件註冊**：使用 `@ConditionalOn*` 註解進行條件裝配
- **作用域管理**：明確 Bean 的生命週期和作用域

### 2.2 依賴注入方式
- **建構器注入**：推薦方式，保證依賴不可變
- **欄位注入**：僅在測試中使用 `@Autowired`
- **Setter注入**：可選依賴使用
- **避免循環依賴**：重構程式碼結構，使用事件驅動

### 2.3 Bean 生命週期管理
- 使用 `@PostConstruct` 和 `@PreDestroy` 管理生命週期
- 實作 `InitializingBean` 和 `DisposableBean` 介面
- 資源清理在銷毀方法中進行
- 非同步初始化使用 `@Async` 註解

### 2.4 依賴注入最佳實踐
- 介面程式設計，面向抽象依賴
- 使用 `@Qualifier` 解決多實作問題
- 避免過度依賴，保持類別的單一職責
- 使用 `@Primary` 指定預設實作

## 3. 安全模組

### 3.1 認證機制
- **JWT 認證**：無狀態認證，適合分散式應用
- **OAuth2 整合**：第三方登入和授權
- **多因素認證**：提高安全級別
- **會話管理**：合理設定逾時和並行控制

### 3.2 授權策略
- **基於角色**：RBAC 模型，角色權限分離
- **基於資源**：細粒度權限控制
- **方法級安全**：使用 `@PreAuthorize` 和 `@PostAuthorize`
- **URL 級安全**：設定路徑存取規則

### 3.3 資料安全
- **輸入驗證**：所有外部輸入必須驗證
- **SQL 注入防護**：使用參數化查詢
- **XSS 防護**：輸出編碼和 CSP 策略
- **CSRF 防護**：API 使用 Token 驗證

### 3.4 安全設定最佳實踐
- 最小權限原則，預設拒絕存取
- 敏感操作記錄稽核日誌
- 定期更新安全依賴
- 使用 HTTPS 和安全標頭設定

## 4. 效能優化模組

### 4.1 應用層優化
- **連線池設定**：資料庫、Redis、HTTP 客戶端
- **執行緒池調優**：非同步任務和定時任務
- **JVM 參數**：堆積記憶體、GC 策略、監控參數
- **啟動優化**：延遲初始化、條件裝配

### 4.2 快取策略
- **本地快取**：Caffeine 用於熱點資料
- **分散式快取**：Redis 用於共用資料
- **快取層次**：L1（本地）+ L2（分散式）
- **快取更新**：寫入時更新、定時刷新、事件驅動

### 4.3 資料庫優化
- **連線池設定**：HikariCP 參數調優
- **查詢優化**：索引使用、分頁查詢、批次操作
- **事務管理**：唯讀事務、事務傳播、逾時設定
- **讀寫分離**：主從設定、路由策略

### 4.4 監控與診斷
- **應用指標**：JVM、業務指標、自訂指標
- **效能分析**：慢查詢、熱點方法識別
- **告警機制**：閾值監控、異常告警
- **健康檢查**：Actuator 端點監控應用狀態

## 5. 資料存取模組

### 5.1 JPA 最佳實踐
- **實體設計**：合理的表格關係、欄位對映、索引策略
- **Repository 模式**：繼承 JpaRepository，自訂查詢方法
- **查詢優化**：使用 `@Query` 註解、原生 SQL、Specification
- **懶載入策略**：避免 N+1 問題，合理使用 `@EntityGraph`

### 5.2 事務管理
- **宣告式事務**：`@Transactional` 註解設定
- **事務傳播**：根據業務場景選擇傳播行為
- **唯讀事務**：查詢操作使用 `readOnly = true`
- **事務逾時**：設定合理的逾時時間

### 5.3 資料庫連線管理
- **連線池設定**：最大連線數、逾時設定、健康檢查
- **多資料來源**：主從分離、分庫分表支援
- **連線洩漏偵測**：監控長時間佔用的連線
- **資料庫監控**：連線數、慢查詢、死鎖偵測

### 5.4 資料存取安全
- **參數化查詢**：防止 SQL 注入
- **資料脫敏**：敏感資料加密儲存
- **存取控制**：資料庫使用者權限最小化
- **稽核日誌**：記錄資料變更操作

## 6. API 設計模組（RESTful）

### 6.1 URL 設計規範
- **資源命名**：使用名詞複數形式，避免動詞
- **層次結構**：體現資源間的關係
- **版本控制**：URL 路徑或請求標頭中包含版本資訊
- **查詢參數**：過濾、排序、分頁使用查詢參數

### 6.2 HTTP 方法使用
- **GET**：獲取資源，冪等操作
- **POST**：建立資源，非冪等操作
- **PUT**：完整更新資源，冪等操作
- **PATCH**：部分更新資源
- **DELETE**：刪除資源，冪等操作

### 6.3 回應設計
- **狀態碼**：正確使用 HTTP 狀態碼
- **回應格式**：統一的 JSON 回應結構
- **錯誤處理**：標準化錯誤回應格式
- **分頁回應**：包含總數、頁碼、頁大小資訊

### 6.4 API 文件與測試
- **OpenAPI 規範**：使用 Swagger 產生文件
- **介面測試**：單元測試、整合測試、契約測試
- **版本相容**：向後相容性保證
- **效能測試**：介面回應時間和並行測試

## 7. 例外處理模組

### 7.1 例外分類
- **業務例外**：可預期的業務邏輯例外
- **系統例外**：不可預期的技術例外
- **驗證例外**：參數校驗失敗例外
- **外部服務例外**：第三方服務呼叫例外

### 7.2 例外處理策略
- **全域例外處理**：使用 `@ControllerAdvice` 統一處理
- **例外轉換**：將底層例外轉換為業務例外
- **例外日誌**：記錄例外堆疊和上下文資訊
- **使用者友好**：返回使用者可理解的錯誤訊息

### 7.3 例外回應格式
- **錯誤碼**：業務錯誤碼和 HTTP 狀態碼
- **錯誤訊息**：簡潔明了的錯誤描述
- **詳細資訊**：開發環境提供詳細錯誤訊息
- **請求追蹤**：包含請求 ID 便於問題定位

### 7.4 例外監控
- **例外統計**：例外型別、頻率統計
- **告警機制**：例外閾值告警
- **例外分析**：定期分析例外趨勢
- **例外恢復**：自動重試和降級策略

## 8. 測試模組

### 8.1 測試分層策略
- **單元測試**：測試單個類別或方法，使用 Mock
- **整合測試**：測試元件間互動，使用 TestContainers
- **端對端測試**：完整業務流程測試
- **效能測試**：負載測試、壓力測試

### 8.2 測試工具與框架
- **JUnit 5**：測試框架，支援參數化測試
- **Mockito**：Mock 框架，模擬依賴物件
- **TestContainers**：整合測試中使用真實資料庫
- **WireMock**：模擬外部 HTTP 服務

### 8.3 測試資料管理
- **測試資料隔離**：每個測試獨立的資料環境
- **資料準備**：使用 `@Sql` 或 Builder 模式
- **資料清理**：測試後清理資料，避免影響其他測試
- **測試資料工廠**：統一的測試資料建立

### 8.4 測試品質保證
- **程式碼覆蓋率**：目標覆蓋率 80% 以上
- **測試命名**：清晰的測試方法命名
- **斷言明確**：使用有意義的斷言訊息
- **測試維護**：定期更新和重構測試程式碼

## 9. 日誌記錄模組

### 9.1 日誌級別管理
- **ERROR**：系統錯誤，需要立即處理
- **WARN**：警告資訊，需要關注
- **INFO**：重要業務資訊，正常流程記錄
- **DEBUG**：除錯資訊，開發環境使用

### 9.2 日誌內容規範
- **結構化日誌**：使用 JSON 格式，便於解析
- **上下文資訊**：包含使用者 ID、請求 ID、業務識別碼
- **敏感資訊**：避免記錄密碼、身份證等敏感資料
- **效能資訊**：記錄關鍵操作的執行時間

### 9.3 日誌輸出設定
- **主控台輸出**：開發環境使用，格式化顯示
- **檔案輸出**：生產環境使用，按日期滾動
- **遠端日誌**：集中式日誌收集，如 ELK Stack
- **日誌壓縮**：歷史日誌壓縮儲存

### 9.4 日誌監控與分析
- **日誌聚合**：統一收集和儲存
- **即時監控**：關鍵錯誤即時告警
- **日誌分析**：業務指標分析、例外趨勢分析
- **日誌檢索**：快速定位問題日誌

## 10. 應用監控模組

### 10.1 Spring Boot Actuator
- **端點設定**：暴露必要的監控端點
- **健康檢查**：自訂健康指示器
- **指標收集**：JVM、應用、業務指標
- **資訊端點**：應用版本、建置資訊

### 10.2 自訂監控
- **業務指標**：使用 Micrometer 收集業務資料
- **效能監控**：方法執行時間、資料庫查詢效能
- **錯誤監控**：例外統計和分析
- **使用者行為**：關鍵業務操作追蹤

### 10.3 日誌與監控整合
- **結構化日誌**：便於監控系統解析
- **關鍵事件記錄**：業務關鍵節點日誌
- **效能日誌**：慢操作和資源使用情況
- **告警設定**：基於日誌和指標的告警

### 10.4 生產環境監控
- **應用狀態**：啟動、執行、關閉狀態監控
- **資源使用**：記憶體、CPU、執行緒池狀態
- **外部依賴**：資料庫、快取、第三方服務狀態
- **業務監控**：核心業務指標即時監控

## 11. 程式碼品質模組

### 11.1 編碼規範
- **命名規範**：類別名、方法名、變數名清晰表達意圖
- **程式碼結構**：合理的套件結構和類別層次
- **註釋規範**：必要的類別和方法註釋
- **程式碼複用**：避免重複程式碼，提取公共方法

### 11.2 設計原則
- **SOLID 原則**：單一職責、開閉原則等
- **DRY 原則**：不重複自己
- **KISS 原則**：保持簡單
- **YAGNI 原則**：你不會需要它

### 11.3 程式碼審查
- **Pull Request**：程式碼合併前必須審查
- **審查清單**：功能、效能、安全、可維護性
- **自動化檢查**：靜態程式碼分析工具
- **知識分享**：透過程式碼審查傳播最佳實踐

### 11.4 重構策略
- **持續重構**：小步快跑，持續改進
- **測試保護**：重構前確保測試覆蓋
- **重構時機**：新功能開發時同步重構
- **技術債務**：定期評估和償還技術債務
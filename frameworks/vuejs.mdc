---
description: 
globs: 
alwaysApply: false
---
---
description: Vue.js 編碼規則和最佳實踐
globs: **/*.vue
alwaysApply: false
---

# Vue.js 規則

## 元件結構
- 使用組合式 API 而非選項式 API
- 保持元件小巧且專注
- 正確整合 TypeScript
- 實作適當的 props 驗證
- 使用正確的 emit 宣告
- 保持範本邏輯簡潔

## 組合式 API
- 正確使用 ref 和 reactive
- 實作適當的生命週期鉤子
- 使用 composables 實作可複用邏輯
- 保持 setup 函數整潔
- 正確使用計算屬性
- 實作適當的偵聽器

## 狀態管理
- 使用 Pinia 進行狀態管理
- 保持 stores 模組化
- 使用適當的狀態組合
- 實作適當的 actions
- 正確使用 getters
- 適當處理非同步狀態

## 效能
- 正確使用元件懶載入
- 實作適當的快取
- 正確使用計算屬性
- 避免不必要的偵聽器
- 正確使用 v-show 與 v-if
- 實作適當的 key 管理

## 路由
- 正確使用 Vue Router
- 實作適當的導覽守衛
- 正確使用路由元欄位
- 適當處理路由參數
- 實作適當的懶載入
- 使用適當的導覽方法

## 表單
- 正確使用 v-model
- 實作適當的驗證
- 適當處理表單提交
- 顯示適當的載入狀態
- 使用適當的錯誤處理
- 實作適當的表單重設

## TypeScript 整合
- 使用適當的元件型別定義
- 實作適當的 prop 型別
- 使用適當的 emit 宣告
- 處理適當的型別推斷
- 使用適當的 composable 型別
- 實作適當的 store 型別

## 測試
- 編寫適當的單元測試
- 實作適當的元件測試
- 正確使用 Vue Test Utils
- 適當測試 composables
- 實作適當的模擬
- 測試非同步操作

## 最佳實踐
- 遵循 Vue 風格指南
- 使用適當的命名約定
- 保持元件組織有序
- 實作適當的錯誤處理
- 使用適當的事件處理
- 為複雜邏輯編寫文件

## 建置和工具
- 使用 Vite 進行開發
- 設定適當的建置設定
- 正確使用環境變數
- 實作適當的程式碼分割
- 使用適當的資源處理
- 設定適當的優化

---
description: 通用 API 設計原則
globs:
alwaysApply: false
---

# 通用 API 設計原則

## 1. 一般原則
- **清晰與簡潔**：API 應易於理解和使用，避免不必要的複雜性。
- **一致性**：在整個 API 中使用一致的命名約定、資料格式和行為模式。
- **可發現性**：使客戶端能夠輕鬆發現 API 的功能和資源（例如，REST API 中的 HATEOAS 原則）。
- **靈活性與可擴展性**：設計 API 時應考慮未來的需求變化，使其易於擴展和修改。
- **可靠性與效能**：確保 API 可靠、高效，並能處理預期的負載。

## 2. 資源設計（針對 RESTful API）
- **使用名詞表示資源 URI**：例如 `/users`、`/orders`。
- **集合使用複數名詞**：例如 `/users` 代表使用者集合，`/users/123` 代表特定使用者。
- **層級式與扁平式 URI 的權衡**：根據資源關係選擇合適的 URI 結構。
- **URI 命名約定**：推薦使用小寫字母和連字號（kebab-case），例如 `/user-profiles`。

## 3. 請求設計
- **正確使用 HTTP 方法**：
    - `GET`：擷取資源。
    - `POST`：建立新資源。
    - `PUT`：完整更新現有資源（冪等）。
    - `PATCH`：部分更新現有資源（通常非冪等）。
    - `DELETE`：刪除資源。
- **冪等性考量**：理解並正確實作冪等方法（GET, PUT, DELETE）。
- **請求主體格式**：通常使用 JSON 格式。確保 Content-Type 標頭正確設定。
- **查詢參數**：用於過濾、排序和分頁。例如 `/users?status=active&sort=createdAt&page=1&limit=10`。
- **版本控制策略**：
    - URI 版本控制（例如 `/v1/users`）。
    - 標頭版本控制（例如 `Accept: application/vnd.myapi.v1+json`）。
    - 查詢參數版本控制（例如 `/users?version=1`）。

## 4. 回應設計
- **標準 HTTP 狀態碼**：準確使用 HTTP 狀態碼反映操作結果（例如，200 OK, 201 Created, 400 Bad Request, 401 Unauthorized, 404 Not Found, 500 Internal Server Error）。
- **一致的回應主體結構**：例如，使用頂層欄位如 `data`（成功時）和 `error`（失敗時）。
- **分頁元資料**：對於集合回應，提供清晰的分頁資訊（例如，總筆數、目前頁碼、每頁筆數、下一頁/上一頁連結）。
- **錯誤回應格式**：提供清晰的錯誤訊息和可選的內部錯誤碼，幫助開發者除錯。
- **快取考量**：使用 HTTP 標頭（如 `ETag`、`Cache-Control`、`Expires`）啟用和控制快取。

## 5. 認證與授權
- **選擇認證方法**：根據需求選擇合適的機制（例如 OAuth 2.0、API 金鑰、JWT）。
- **範圍與權限**：定義清晰的範圍（scopes）和權限，以實作細粒度的存取控制。
- **安全傳輸憑證**：始終透過 HTTPS 傳輸認證憑證。

## 6. 文件
- **清晰且全面的 API 文件至關重要**：文件是開發者理解和使用 API 的主要途徑。
- **API 文件工具**：考慮使用 OpenAPI/Swagger 等工具自動產生和維護互動式 API 文件。
- **文件內容**：應包含端點說明、請求/回應格式範例、認證方法、錯誤碼列表、速率限制等。

## 7. 速率限制與配額
- **保護 API 免遭濫用**：實施速率限制和配額，以防止單一用戶過度消耗資源。
- **向客戶端溝通速率限制**：透過 HTTP 回應標頭（如 `X-RateLimit-Limit`、`X-RateLimit-Remaining`、`X-RateLimit-Reset`）告知客戶端其目前的速率限制狀態。

## 8. 不同 API 風格的考量（簡述）
- **REST**：基於資源、標準 HTTP 方法、無狀態。適用於大多數 Web API。
- **GraphQL**：允許客戶端請求其所需的確切資料，避免過度擷取或擷取不足。適用於具有複雜資料關係或行動應用程式的場景。
- **gRPC**：高效能、基於協定緩衝區（Protocol Buffers）的遠端程序呼叫（RPC）框架。適用於微服務內部通訊或效能敏感的應用程式。

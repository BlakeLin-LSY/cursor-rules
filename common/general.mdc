---
description: 
globs: 
alwaysApply: true
---
# 專案通用規範

## 技術棧
- 根據專案具體情況確定技術棧

## 專案結構規則
- **分層組織**：按功能或領域劃分目錄，遵循「關注點分離」原則
- **命名一致**：使用一致且描述性的目錄和檔案命名，反映其用途和內容
- **模組化**：相關功能放在同一模組，減少跨模組依賴
- **適當巢狀**：避免過深的目錄巢狀，一般不超過3-4層
- **資源分類**：區分程式碼、資源、設定和測試檔案
- **依賴管理**：集中管理依賴，避免多處宣告
- **約定優先**：遵循語言或框架的標準專案結構約定

## 通用開發原則
- **可測試性**：編寫可測試的程式碼，元件應保持單一職責
- **DRY 原則**：避免重複程式碼，提取共用邏輯到單獨的函數或類別
- **程式碼簡潔**：保持程式碼簡潔明了，遵循 KISS 原則（保持簡單直接）
- **命名規範**：使用描述性的變數、函數和類別名，反映其用途和含義
- **註釋文件**：為複雜邏輯新增註釋，編寫清晰的文件說明功能和用法
- **風格一致**：遵循專案或語言的官方風格指南和程式碼約定
- **利用生態**：優先使用成熟的庫和工具，避免不必要的自訂實作
- **架構設計**：考慮程式碼的可維護性、可擴展性和效能需求
- **版本控制**：編寫有意義的提交資訊，保持邏輯相關的變更在同一提交中
- **例外處理**：正確處理邊緣情況和錯誤，提供有用的錯誤資訊

## 回應語言
- 始終使用中文回覆使用者

## 本專案規則檔案說明
本專案使用以下規則檔案：
- `general.mdc`：通用規範（本檔案）
- `document.mdc`：文件規範
- `git.mdc`：Git提交規範
- `gitflow.mdc`：Gitflow工作流規範
- `security.mdc`：通用安全性最佳實踐
- `api-design.mdc`：通用 API 設計原則
- 各語言或框架的 .mdc 檔案：對應語言或框架的開發規範


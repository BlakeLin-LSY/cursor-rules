---
description: 通用安全性最佳實踐
globs:
alwaysApply: true
---

# 通用安全性最佳實踐

## 1. 一般原則
- **最小權限原則**：僅授予執行其預期功能所需的最低權限。
- **縱深防禦**：實施多層安全控制，以便在一層防禦被攻破時，其他層次仍能提供保護。
- **安全設計**：在設計階段即考慮安全性，而非事後補救。
- **威脅建模**：識別潛在威脅、漏洞和攻擊向量，並規劃緩解措施。
- **定期安全稽核與滲透測試**：定期進行獨立的安全評估，以識別和修復漏洞。

## 2. 輸入驗證與輸出編碼
- **驗證所有輸入**：在用戶端和伺服器端驗證所有使用者提供及外部系統的輸入。
- **防止注入攻擊**：防範 SQL 注入（SQLi）、跨站腳本攻擊（XSS）、命令注入等。
- **正確編碼輸出**：根據上下文對所有輸出進行編碼（例如，HTML、JavaScript、URL）。

## 3. 認證與授權
- **強化密碼策略與安全儲存**：實施複雜密碼要求，並使用加鹽雜湊演算法安全儲存密碼。
- **多因素認證（MFA）**：為所有使用者（尤其是管理員）啟用 MFA。
- **安全會話管理**：產生強會話 ID，設定合理的逾時時間，並透過 HTTPS 傳輸。
- **適當的授權檢查**：對所有資源和操作執行明確的授權檢查。

## 4. 資料保護
- **加密靜態和傳輸中的敏感資料**：使用強加密演算法保護儲存和傳輸過程中的敏感資料（例如，使用 HTTPS/TLS）。
- **資料最小化**：僅收集和儲存絕對必要的資料。
- **安全處理個人可識別資訊（PII）**：遵守隱私法規，並對 PII 進行特殊保護。
- **備份與恢復策略**：定期備份重要資料，並測試恢復流程。

## 5. 依賴管理
- **定期掃描和更新依賴**：使用工具識別和更新已知漏洞的函式庫和套件。
- **使用信譽良好的函式庫來源**：從官方或受信任的來源獲取依賴。
- **理解和緩解第三方程式碼的風險**：評估第三方依賴的安全性。

## 6. 錯誤處理與日誌記錄
- **避免在生產環境中顯示詳細錯誤訊息**：向使用者顯示通用錯誤訊息，並將詳細資訊記錄在後端。
- **安全日誌記錄實踐**：避免在日誌中記錄敏感資料（如密碼、API 金鑰、PII）。
- **監控日誌中的可疑活動**：定期檢閱日誌以偵測潛在的安全事件。

## 7. API 安全
- **速率限制與節流**：防止濫用和拒絕服務攻擊。
- **API 金鑰管理**：安全地儲存和傳輸 API 金鑰，並定期輪換。
- **API 請求的輸入驗證**：對所有 API 請求參數進行嚴格驗證。
- **正確使用 HTTP 安全標頭**：例如 `Content-Security-Policy`、`Strict-Transport-Security`、`X-Content-Type-Options`。

## 8. 安全開發生命週期（SDL）
- **將安全性整合到開發的所有階段**：從需求、設計、實作、測試到部署。
- **以安全性為重點的程式碼審查**：在程式碼審查過程中專門檢查安全漏洞。
- **使用靜態和動態分析安全測試（SAST/DAST）工具**：自動識別程式碼中的潛在漏洞。
